import Foundation

/// The current state of the order
public enum OrderState {
    /// Indicates the order is open. Open orders may be updated.
    case OPEN
    
    /// Indicates the order is completed. Completed orders are fully paid. This is a terminal state.
    case COMPLETED
    
    /// Indicates the order is canceled. Canceled orders are not paid. This is a terminal state.
    case CANCELED
}

/// Contains all information related to a single order to process with Square, including line items that specify the products to purchase
/// Order objects also include information on any associated tenders, refunds, and returns.
/// All Connect V2 Transactions have all been converted to Orders including all associated itemization data.
public struct Order: Codable {

    /// **Read only** The order's unique ID.
    public let id: String?

    /// The ID of the merchant location this order is associated with.
    /// **REQUIRED**
    /// **Min Length 1**
    public let location_id: String

    // TODO: See if we can automatically decode this
    /// **Read only** Timestamp for when the order was closed. In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    public let closed_at: String?
    
    /// **Read only** Timestamp for when the order was created. In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    public let created_at: String?

    /// The Customer ID of the customer associated with the order.
    public let customer_id: String?

    // TODO
    /// The list of all discounts associated with the order.
    /// Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`, an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to. For discounts with `ORDER` scope, the server will generate an `OrderLineItemAppliedDiscount` for every line item.
    /// **IMPORTANT:** If `LINE_ITEM` scope is set on any discounts in this field, usage of the deprecated `line_items.discounts` field will result in an error. Please use `line_items.applied_discounts` instead.
    // public let discounts: [Order​Line​Item​Discount]?

    // TODO
    /// Details on order fulfillment.
    /// Orders can only be created with at most one fulfillment. However, orders returned by the API may contain multiple fulfillments.
    // public let fulfillments: [Order​Fulfillment]?

    // TODO
    // The line items included in the order.
    //public let line_items: [OrderLineItem]?

    /// Application-defined data attached to this order. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (personally identifiable information, card details, etc.).
    /// Keys written by applications must be 60 characters or less and must be in the character set [a-zA-Z0-9_-]. Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.
    /// Values have a max length of 255 characters.
    /// An application may have up to 10 entries per metadata field.
    /// Entries written by applications are private and can only be read or modified by the same application.
    /// See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
    public let metadata: Decodable?

    // TODO
    /// **Read only** Net money amounts (sale money - return money).
    //public let net_amounts: Order​Money​Amounts

    /// A client specified identifier to associate an entity in another system with this order.
    /// **Max Length 40**
    public let reference_id: String?

    // TODO
    /// **Read only** The Refunds that are part of this Order.
    //let refunds: [Refund]?

    // TODO
    /// **Read only** Rollup of returned money amounts.
    //public let return_amounts: Order​Money​Amounts

    // TODO
    /// **Read only** Collection of items from sale Orders being returned in this one. Normally part of an Itemized Return or Exchange. There will be exactly one Return object per sale Order being referenced.
    //public let returns: [OrderReturn]?

    /// **Read only** A positive or negative rounding adjustment to the total of the order, commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.
    public let rounding_adjustment: Order​Rounding​Adjustment?

    // TODO
    /// A list of service charges applied to the order.
    public let service_charges: [Order​Service​Charge]?

    /// The origination details of the order.
    public let source: Order​Source?

    /// The current state of the order. OPEN,COMPLETED,CANCELED
    public let state: OrderState?

    // TODO
    /// The list of all taxes associated with the order.
    /// Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an OrderLineItemAppliedTax must be added to each line item that the tax applies to. For taxes with `ORDER` scope, the server will generate an `OrderLineItemAppliedTax` for every line item.
    /// On reads, each tax in the list will include the total amount of that tax applied to the order.
    /// **IMPORTANT:** If `LINE_ITEM` scope is set on any taxes in this field, usage of the deprecated `line_items.taxes` field will result in an error. Please use `line_items.applied_taxes` instead.
    //public let taxes: [Order​Line​Item​Tax]?

    // TODO
    /// **Read only** The Tenders which were used to pay for the Order.
    //public let tenders: [Tender]?

    /// **Read only** The total discount amount of money to collect for the order.
    public let total_discount_money: Money?

    /// **Read only** The total amount of money to collect for the order.
    public let total_money: Money?
    
    /// **Read only** The total amount of money collected in service charges for the order.
    /// Note: `total_service_charge_money` is the sum of applied_money fields for each individual service charge. Therefore, `total_service_charge_money` will only include inclusive tax amounts, not additive tax amounts.
    public let total_service_charge_money: Money?

    /// **Read only** The total tax amount of money to collect for the order.
    public let total_tax_money: Money?

    /// **Read only** Timestamp for when the order was last updated. In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    public let updated_at: String?

    /// Version number which is incremented each time an update is committed to the order. Orders that were not created through the API will not include a version and thus cannot be updated.
    /// [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
    public let version: Int?
}
