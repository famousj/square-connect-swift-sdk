/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/**  */

public struct ObtainTokenRequest: Codable {

    /** The Square-issued ID of your application, available from the [application dashboard](https://connect.squareup.com/apps). */
    public let clientId: String?
    /** The Square-issued application secret for your application, available from the [application dashboard](https://connect.squareup.com/apps). */
    public let clientSecret: String?
    /** The authorization code to exchange. This is required if &#x60;grant_type&#x60; is set to &#x60;authorization_code&#x60;, to indicate that the application wants to exchange an authorization code for an OAuth access token. */
    public let code: String?
    /** The redirect URL assigned in the [application dashboard](https://connect.squareup.com/apps). */
    public let redirectUri: String?
    /** Specifies the method to request an OAuth access token. Valid values are: &#x60;authorization_code&#x60;, &#x60;refresh_token&#x60;, and &#x60;migration_token&#x60; */
    public let grantType: String?
    /** A valid refresh token for generating a new OAuth access token. A valid refresh token is required if &#x60;grant_type&#x60; is set to &#x60;refresh_token&#x60; , to indicate the application wants a replacement for an expired OAuth access token. */
    public let refreshToken: String?
    /** Legacy OAuth access token obtained using a Connect API version prior to 2019-03-13. This parameter is required if &#x60;grant_type&#x60; is set to &#x60;migration_token&#x60; to indicate that the application wants to get a replacement OAuth access token. The response also returns a refresh token. For more information, see [Migrate to Using Refresh Tokens](/authz/oauth/migration). */
    public let migrationToken: String?

    public init(clientId: String?, clientSecret: String?, code: String?, redirectUri: String?, grantType: String?, refreshToken: String?, migrationToken: String?) {
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.code = code
        self.redirectUri = redirectUri
        self.grantType = grantType
        self.refreshToken = refreshToken
        self.migrationToken = migrationToken
    }

    public enum CodingKeys: String, CodingKey { 
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case code
        case redirectUri = "redirect_uri"
        case grantType = "grant_type"
        case refreshToken = "refresh_token"
        case migrationToken = "migration_token"
    }

}

