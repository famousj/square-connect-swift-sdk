/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** Refunds a payment. */

public struct RefundPaymentRequest: Codable {

    /**  A unique string that identifies this RefundPayment request. Key can be any valid string but must be unique for every RefundPayment request.  For more information, see [Idempotency keys](/basics/api101/idempotency). */
    public let idempotencyKey: String
    /** The amount of money to refund.  Cannot be more than the &#x60;total_money&#x60; value of the payment minus the total amount of all previously completed refunds for this payment.  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is charging the card. */
    public let amountMoney: Money
    /** Amount of money the developer will contribute to help cover the refunded amount. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.  Value cannot be more than the &#x60;amount_money&#x60;.  You can specify this parameter in a refund request only if the  same parameter was also included when taking the payment. This is part of the application fee  scenario the API supports.  For more information, see  [Collect Fees](/payments-api/take-payments-and-collect-fees) */
    public let appFeeMoney: Money?
    /** Unique ID of the payment being refunded. */
    public let paymentId: String?
    /** A description of the reason for the refund. */
    public let reason: String?

    public init(idempotencyKey: String, amountMoney: Money, appFeeMoney: Money?, paymentId: String?, reason: String?) {
        self.idempotencyKey = idempotencyKey
        self.amountMoney = amountMoney
        self.appFeeMoney = appFeeMoney
        self.paymentId = paymentId
        self.reason = reason
    }

    public enum CodingKeys: String, CodingKey { 
        case idempotencyKey = "idempotency_key"
        case amountMoney = "amount_money"
        case appFeeMoney = "app_fee_money"
        case paymentId = "payment_id"
        case reason
    }

}

