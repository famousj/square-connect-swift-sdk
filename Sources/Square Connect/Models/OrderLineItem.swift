/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** Represents a line item in an order. Each line item describes a different product to purchase, with its own quantity and price details. */

public struct OrderLineItem: Codable {

    /** Unique ID that identifies the line item only within this order. */
    public let uid: String?
    /** The name of the line item. */
    public let name: String?
    /** The quantity purchased, formatted as a decimal number. For example: &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example: &#x60;\&quot;1.70000\&quot;&#x60;. */
    public let quantity: String
    /** The unit and precision that this line item&#39;s quantity is measured in. */
    public let quantityUnit: OrderQuantityUnit?
    /** The note of the line item. */
    public let note: String?
    /** The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item. */
    public let catalogObjectId: String?
    /** The name of the variation applied to this line item. */
    public let variationName: String?
    /** The [CatalogModifier](#type-catalogmodifier)s applied to this line item. */
    public let modifiers: [OrderLineItemModifier]?
    /** A list of taxes applied to this line item. On read or retrieve, this list includes both item-level taxes and any order-level taxes apportioned to this item. When creating an Order, set your item-level taxes in this list.  This field has been deprecated in favour of &#x60;applied_taxes&#x60;. Usage of both this field and &#x60;applied_taxes&#x60; when creating an order will result in an error. Usage of this field when sending requests to the UpdateOrder endpoint will result in an error. */
    public let taxes: [OrderLineItemTax]?
    /** A list of discounts applied to this line item. On read or retrieve, this list includes both item-level discounts and any order-level discounts apportioned to this item. When creating an Order, set your item-level discounts in this list.  This field has been deprecated in favour of &#x60;applied_discounts&#x60;. Usage of both this field and &#x60;applied_discounts&#x60; when creating an order will result in an error. Usage of this field when sending requests to the UpdateOrder endpoint will result in an error. */
    public let discounts: [OrderLineItemDiscount]?
    /** The list of references to taxes applied to this line item. Each &#x60;OrderLineItemAppliedTax&#x60; has a &#x60;tax_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemTax&#x60; applied to the line item. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedTax&#x60; will be automatically created on every line item for all &#x60;ORDER&#x60; scoped taxes added to the order. &#x60;OrderLineItemAppliedTax&#x60; records for &#x60;LINE_ITEM&#x60; scoped taxes must be added in requests for the tax to apply to any line items.  To change the amount of a tax, modify the referenced top-level tax. */
    public let appliedTaxes: [OrderLineItemAppliedTax]?
    /** The list of references to discounts applied to this line item. Each &#x60;OrderLineItemAppliedDiscount&#x60; has a &#x60;discount_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemDiscounts&#x60; applied to the line item. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedDiscount&#x60; will be automatically created on every line item for all &#x60;ORDER&#x60; scoped discounts that are added to the order. &#x60;OrderLineItemAppliedDiscount&#x60; records for &#x60;LINE_ITEM&#x60; scoped discounts must be added in requests for the discount to apply to any line items.  To change the amount of a discount, modify the referenced top-level discount. */
    public let appliedDiscounts: [OrderLineItemAppliedDiscount]?
    /** The base price for a single unit of the line item. */
    public let basePriceMoney: Money?
    /** The total price of all item variations sold in this line item. Calculated as &#x60;base_price_money&#x60; multiplied by &#x60;quantity&#x60;. Does not include modifiers. */
    public let variationTotalPriceMoney: Money?
    /** The amount of money made in gross sales for this line item. Calculated as the sum of the variation&#39;s total price and each modifier&#39;s total price. */
    public let grossSalesMoney: Money?
    /** The total tax amount of money to collect for the line item. */
    public let totalTaxMoney: Money?
    /** The total discount amount of money to collect for the line item. */
    public let totalDiscountMoney: Money?
    /** The total amount of money to collect for this line item. */
    public let totalMoney: Money?

    public init(uid: String?, name: String?, quantity: String, quantityUnit: OrderQuantityUnit?, note: String?, catalogObjectId: String?, variationName: String?, modifiers: [OrderLineItemModifier]?, taxes: [OrderLineItemTax]?, discounts: [OrderLineItemDiscount]?, appliedTaxes: [OrderLineItemAppliedTax]?, appliedDiscounts: [OrderLineItemAppliedDiscount]?, basePriceMoney: Money?, variationTotalPriceMoney: Money?, grossSalesMoney: Money?, totalTaxMoney: Money?, totalDiscountMoney: Money?, totalMoney: Money?) {
        self.uid = uid
        self.name = name
        self.quantity = quantity
        self.quantityUnit = quantityUnit
        self.note = note
        self.catalogObjectId = catalogObjectId
        self.variationName = variationName
        self.modifiers = modifiers
        self.taxes = taxes
        self.discounts = discounts
        self.appliedTaxes = appliedTaxes
        self.appliedDiscounts = appliedDiscounts
        self.basePriceMoney = basePriceMoney
        self.variationTotalPriceMoney = variationTotalPriceMoney
        self.grossSalesMoney = grossSalesMoney
        self.totalTaxMoney = totalTaxMoney
        self.totalDiscountMoney = totalDiscountMoney
        self.totalMoney = totalMoney
    }

    public enum CodingKeys: String, CodingKey { 
        case uid
        case name
        case quantity
        case quantityUnit = "quantity_unit"
        case note
        case catalogObjectId = "catalog_object_id"
        case variationName = "variation_name"
        case modifiers
        case taxes
        case discounts
        case appliedTaxes = "applied_taxes"
        case appliedDiscounts = "applied_discounts"
        case basePriceMoney = "base_price_money"
        case variationTotalPriceMoney = "variation_total_price_money"
        case grossSalesMoney = "gross_sales_money"
        case totalTaxMoney = "total_tax_money"
        case totalDiscountMoney = "total_discount_money"
        case totalMoney = "total_money"
    }

}

