/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** A tender represents a discrete monetary exchange. Square represents this exchange as a money object with a specific currency and amount, where the amount is given in the smallest denomination of the given currency.  Square POS can accept more than one form of tender for a single payment (such as by splitting a bill between a credit card and a gift card). The &#x60;tender&#x60; field of the Payment object lists all forms of tender used for the payment.  Split tender payments behave slightly differently from single tender payments:  The receipt_url for a split tender corresponds only to the first tender listed in the tender field. To get the receipt URLs for the remaining tenders, use the receipt_url fields of the corresponding Tender objects.  *A note on gift cards**: when a customer purchases a Square gift card from a merchant, the merchant receives the full amount of the gift card in the associated payment.  When that gift card is used as a tender, the balance of the gift card is reduced and the merchant receives no funds. A &#x60;Tender&#x60; object with a type of &#x60;SQUARE_GIFT_CARD&#x60; indicates a gift card was used for some or all of the associated payment. */

public struct V1Tender: Codable, Identifiable {

    /** The tender&#39;s unique ID. */
    public let id: String?
    /** The type of tender. See [V1TenderType](#type-v1tendertype) for possible values */
    public let type: V1TenderType?
    /** A human-readable description of the tender. */
    public let name: String?
    /** The ID of the employee that processed the tender. */
    public let employeeId: String?
    /** The URL of the receipt for the tender. */
    public let receiptUrl: String?
    /** The brand of credit card provided. See [V1TenderCardBrand](#type-v1tendercardbrand) for possible values */
    public let cardBrand: V1TenderCardBrand?
    /** The last four digits of the provided credit card&#39;s account number. */
    public let panSuffix: String?
    /** The tender&#39;s unique ID. See [V1TenderEntryMethod](#type-v1tenderentrymethod) for possible values */
    public let entryMethod: V1TenderEntryMethod?
    /** Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER. */
    public let paymentNote: String?
    /** The total amount of money provided in this form of tender. */
    public let totalMoney: V1Money?
    /** The amount of total_money applied to the payment. */
    public let tenderedMoney: V1Money?
    /** The time when the tender was created, in ISO 8601 format. */
    public let tenderedAt: String?
    /** The time when the tender was settled, in ISO 8601 format. */
    public let settledAt: String?
    /** The amount of total_money returned to the buyer as change. */
    public let changeBackMoney: V1Money?
    /** The total of all refunds applied to this tender. This amount is always negative or zero. */
    public let refundedMoney: V1Money?
    /** Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange. */
    public let isExchange: Bool?

    public init(id: String?, type: V1TenderType?, name: String?, employeeId: String?, receiptUrl: String?, cardBrand: V1TenderCardBrand?, panSuffix: String?, entryMethod: V1TenderEntryMethod?, paymentNote: String?, totalMoney: V1Money?, tenderedMoney: V1Money?, tenderedAt: String?, settledAt: String?, changeBackMoney: V1Money?, refundedMoney: V1Money?, isExchange: Bool?) {
        self.id = id
        self.type = type
        self.name = name
        self.employeeId = employeeId
        self.receiptUrl = receiptUrl
        self.cardBrand = cardBrand
        self.panSuffix = panSuffix
        self.entryMethod = entryMethod
        self.paymentNote = paymentNote
        self.totalMoney = totalMoney
        self.tenderedMoney = tenderedMoney
        self.tenderedAt = tenderedAt
        self.settledAt = settledAt
        self.changeBackMoney = changeBackMoney
        self.refundedMoney = refundedMoney
        self.isExchange = isExchange
    }

    public enum CodingKeys: String, CodingKey { 
        case id
        case type
        case name
        case employeeId = "employee_id"
        case receiptUrl = "receipt_url"
        case cardBrand = "card_brand"
        case panSuffix = "pan_suffix"
        case entryMethod = "entry_method"
        case paymentNote = "payment_note"
        case totalMoney = "total_money"
        case tenderedMoney = "tendered_money"
        case tenderedAt = "tendered_at"
        case settledAt = "settled_at"
        case changeBackMoney = "change_back_money"
        case refundedMoney = "refunded_money"
        case isExchange = "is_exchange"
    }

}

