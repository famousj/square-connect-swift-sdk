/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */

import Foundation

/** An item variation (i.e., product) in the Catalog object model. Each item may have a maximum of 250 item variations. */

public struct CatalogItemVariation: Codable {

    /** The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable. */
    public let itemId: String?
    /** The item variation&#39;s name. Searchable. This field has max length of 255 Unicode code points. */
    public let name: String?
    /** The item variation&#39;s SKU, if any. Searchable. */
    public let sku: String?
    /** The item variation&#39;s UPC, if any. Searchable in the Connect API. This field is only exposed in the Connect API. It is not exposed in Square&#39;s Dashboard, Square Point of Sale app or Retail Point of Sale app. */
    public let upc: String?
    /** The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent [CatalogItem](#type-catalogitem) is set according to the item variations&#39;s position. On reads, the value is not guaranteed to be sequential or unique. */
    public let ordinal: Int?
    /** Indicates whether the item variation&#39;s price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for possible values */
    public let pricingType: CatalogPricingType?
    /** The item variation&#39;s price, if fixed pricing is used. */
    public let priceMoney: Money?
    /** Per-[location](#type-location) price and inventory overrides. */
    public let locationOverrides: [ItemVariationLocationOverrides]?
    /** If &#x60;true&#x60;, inventory tracking is active for the variation. */
    public let trackInventory: Bool?
    /** Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its &#x60;inventory_alert_threshold&#x60;. See [InventoryAlertType](#type-inventoryalerttype) for possible values */
    public let inventoryAlertType: InventoryAlertType?
    /** If the inventory quantity for the variation is less than or equal to this value and &#x60;inventory_alert_type&#x60; is &#x60;LOW_QUANTITY&#x60;, the variation displays an alert in the merchant dashboard.  This value is always an integer. */
    public let inventoryAlertThreshold: Int64?
    /** Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable. */
    public let userData: String?
    /** If the [CatalogItem](#type-catalogitem) that owns this item variation is of type &#x60;APPOINTMENTS_SERVICE&#x60;, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value &#x60;1800000&#x60;, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second). */
    public let serviceDuration: Int64?
    /** List of item option values associated with this item variation. Listed in the same order as the item options of the parent item. */
    public let itemOptionValues: [CatalogItemOptionValueForItemVariation]?
    /** ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity sold of this item variation. If left unset, the item will be sold in whole quantities. */
    public let measurementUnitId: String?

    public init(itemId: String?, name: String?, sku: String?, upc: String?, ordinal: Int?, pricingType: CatalogPricingType?, priceMoney: Money?, locationOverrides: [ItemVariationLocationOverrides]?, trackInventory: Bool?, inventoryAlertType: InventoryAlertType?, inventoryAlertThreshold: Int64?, userData: String?, serviceDuration: Int64?, itemOptionValues: [CatalogItemOptionValueForItemVariation]?, measurementUnitId: String?) {
        self.itemId = itemId
        self.name = name
        self.sku = sku
        self.upc = upc
        self.ordinal = ordinal
        self.pricingType = pricingType
        self.priceMoney = priceMoney
        self.locationOverrides = locationOverrides
        self.trackInventory = trackInventory
        self.inventoryAlertType = inventoryAlertType
        self.inventoryAlertThreshold = inventoryAlertThreshold
        self.userData = userData
        self.serviceDuration = serviceDuration
        self.itemOptionValues = itemOptionValues
        self.measurementUnitId = measurementUnitId
    }

    public enum CodingKeys: String, CodingKey { 
        case itemId = "item_id"
        case name
        case sku
        case upc
        case ordinal
        case pricingType = "pricing_type"
        case priceMoney = "price_money"
        case locationOverrides = "location_overrides"
        case trackInventory = "track_inventory"
        case inventoryAlertType = "inventory_alert_type"
        case inventoryAlertThreshold = "inventory_alert_threshold"
        case userData = "user_data"
        case serviceDuration = "service_duration"
        case itemOptionValues = "item_option_values"
        case measurementUnitId = "measurement_unit_id"
    }

}

