/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */

import Foundation

/** Represents a physical address. */

public struct Address: Codable {

    /** The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields). */
    public let addressLine1: String?
    /** The second line of the address, if any. */
    public let addressLine2: String?
    /** The third line of the address, if any. */
    public let addressLine3: String?
    /** The city or town of the address. */
    public let locality: String?
    /** A civil region within the address&#39;s &#x60;locality&#x60;, if any. */
    public let sublocality: String?
    /** A civil region within the address&#39;s &#x60;sublocality&#x60;, if any. */
    public let sublocality2: String?
    /** A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any. */
    public let sublocality3: String?
    /** A civil entity within the address&#39;s country. In the US, this is the state. */
    public let administrativeDistrictLevel1: String?
    /** A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county. */
    public let administrativeDistrictLevel2: String?
    /** A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any. */
    public let administrativeDistrictLevel3: String?
    /** The address&#39;s postal code. */
    public let postalCode: String?
    /** The address&#39;s country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values */
    public let country: Country?
    /** Optional first name when it&#39;s representing recipient. */
    public let firstName: String?
    /** Optional last name when it&#39;s representing recipient. */
    public let lastName: String?
    /** Optional organization name when it&#39;s representing recipient. */
    public let organization: String?

    public init(addressLine1: String?, addressLine2: String?, addressLine3: String?, locality: String?, sublocality: String?, sublocality2: String?, sublocality3: String?, administrativeDistrictLevel1: String?, administrativeDistrictLevel2: String?, administrativeDistrictLevel3: String?, postalCode: String?, country: Country?, firstName: String?, lastName: String?, organization: String?) {
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.addressLine3 = addressLine3
        self.locality = locality
        self.sublocality = sublocality
        self.sublocality2 = sublocality2
        self.sublocality3 = sublocality3
        self.administrativeDistrictLevel1 = administrativeDistrictLevel1
        self.administrativeDistrictLevel2 = administrativeDistrictLevel2
        self.administrativeDistrictLevel3 = administrativeDistrictLevel3
        self.postalCode = postalCode
        self.country = country
        self.firstName = firstName
        self.lastName = lastName
        self.organization = organization
    }

    public enum CodingKeys: String, CodingKey {
        case addressLine1 = "address_line_1"
        case addressLine2 = "address_line_2"
        case addressLine3 = "address_line_3"
        case locality
        case sublocality
        case sublocality2 = "sublocality_2"
        case sublocality3 = "sublocality_3"
        case administrativeDistrictLevel1 = "administrative_district_level_1"
        case administrativeDistrictLevel2 = "administrative_district_level_2"
        case administrativeDistrictLevel3 = "administrative_district_level_3"
        case postalCode = "postal_code"
        case country
        case firstName = "first_name"
        case lastName = "last_name"
        case organization
    }


}

