/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** Contains all information related to a single order to process with Square, including line items that specify the products to purchase. Order objects also include information on any associated tenders, refunds, and returns.  All Connect V2 Transactions have all been converted to Orders including all associated itemization data. */

public struct Order: Codable, Identifiable {

    /** The order&#39;s unique ID. */
    public let id: String?
    /** The ID of the merchant location this order is associated with. */
    public let locationId: String
    /** A client specified identifier to associate an entity in another system with this order. */
    public let referenceId: String?
    /** The origination details of the order. */
    public let source: OrderSource?
    /** The [Customer](#type-customer) ID of the customer associated with the order. */
    public let customerId: String?
    /** The line items included in the order. */
    public let lineItems: [OrderLineItem]?
    /** The list of all taxes associated with the order.  Taxes can be scoped to either &#x60;ORDER&#x60; or &#x60;LINE_ITEM&#x60;. For taxes with &#x60;LINE_ITEM&#x60; scope, an &#x60;OrderLineItemAppliedTax&#x60; must be added to each line item that the tax applies to. For taxes with &#x60;ORDER&#x60; scope, the server will generate an &#x60;OrderLineItemAppliedTax&#x60; for every line item.  On reads, each tax in the list will include the total amount of that tax applied to the order.  __IMPORTANT__: If &#x60;LINE_ITEM&#x60; scope is set on any taxes in this field, usage of the deprecated &#x60;line_items.taxes&#x60; field will result in an error. Please use &#x60;line_items.applied_taxes&#x60; instead. */
    public let taxes: [OrderLineItemTax]?
    /** The list of all discounts associated with the order.  Discounts can be scoped to either &#x60;ORDER&#x60; or &#x60;LINE_ITEM&#x60;. For discounts scoped to &#x60;LINE_ITEM&#x60;, an &#x60;OrderLineItemAppliedDiscount&#x60; must be added to each line item that the discount applies to. For discounts with &#x60;ORDER&#x60; scope, the server will generate an &#x60;OrderLineItemAppliedDiscount&#x60; for every line item.  __IMPORTANT__: If &#x60;LINE_ITEM&#x60; scope is set on any discounts in this field, usage of the deprecated &#x60;line_items.discounts&#x60; field will result in an error. Please use &#x60;line_items.applied_discounts&#x60; instead. */
    public let discounts: [OrderLineItemDiscount]?
    /** A list of service charges applied to the order. */
    public let serviceCharges: [OrderServiceCharge]?
    /** Details on order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API may contain multiple fulfillments. */
    public let fulfillments: [OrderFulfillment]?
    /** Collection of items from sale Orders being returned in this one. Normally part of an Itemized Return or Exchange.  There will be exactly one &#x60;Return&#x60; object per sale Order being referenced. */
    public let returns: [OrderReturn]?
    /** Rollup of returned money amounts. */
    public let returnAmounts: OrderMoneyAmounts?
    /** Net money amounts (sale money - return money). */
    public let netAmounts: OrderMoneyAmounts?
    /** A positive or negative rounding adjustment to the total of the order, commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency. */
    public let roundingAdjustment: OrderRoundingAdjustment?
    /** The Tenders which were used to pay for the Order. */
    public let tenders: [Tender]?
    /** The Refunds that are part of this Order. */
    public let refunds: [Refund]?
    /** Timestamp for when the order was created. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. */
    public let createdAt: String?
    /** Timestamp for when the order was last updated. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. */
    public let updatedAt: String?
    /** Timestamp for when the order was closed. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. */
    public let closedAt: String?
    /** The current state of the order. &#x60;OPEN&#x60;,&#x60;COMPLETED&#x60;,&#x60;CANCELED&#x60; See [OrderState](#type-orderstate) for possible values */
    public let state: OrderState?
    /** Version number which is incremented each time an update is committed to the order. Orders that were not created through the API will not include a version and thus cannot be updated.  [Read more about working with versions](/orders-api/manage-orders#update-orders). */
    public let version: Int?
    /** The total amount of money to collect for the order. */
    public let totalMoney: Money?
    /** The total tax amount of money to collect for the order. */
    public let totalTaxMoney: Money?
    /** The total discount amount of money to collect for the order. */
    public let totalDiscountMoney: Money?
    /** The total amount of money collected in service charges for the order.  Note: &#x60;total_service_charge_money&#x60; is the sum of &#x60;applied_money&#x60; fields for each individual service charge. Therefore, &#x60;total_service_charge_money&#x60; will only include inclusive tax amounts, not additive tax amounts. */
    public let totalServiceChargeMoney: Money?

    public init(id: String?, locationId: String, referenceId: String?, source: OrderSource?, customerId: String?, lineItems: [OrderLineItem]?, taxes: [OrderLineItemTax]?, discounts: [OrderLineItemDiscount]?, serviceCharges: [OrderServiceCharge]?, fulfillments: [OrderFulfillment]?, returns: [OrderReturn]?, returnAmounts: OrderMoneyAmounts?, netAmounts: OrderMoneyAmounts?, roundingAdjustment: OrderRoundingAdjustment?, tenders: [Tender]?, refunds: [Refund]?, createdAt: String?, updatedAt: String?, closedAt: String?, state: OrderState?, version: Int?, totalMoney: Money?, totalTaxMoney: Money?, totalDiscountMoney: Money?, totalServiceChargeMoney: Money?) {
        self.id = id
        self.locationId = locationId
        self.referenceId = referenceId
        self.source = source
        self.customerId = customerId
        self.lineItems = lineItems
        self.taxes = taxes
        self.discounts = discounts
        self.serviceCharges = serviceCharges
        self.fulfillments = fulfillments
        self.returns = returns
        self.returnAmounts = returnAmounts
        self.netAmounts = netAmounts
        self.roundingAdjustment = roundingAdjustment
        self.tenders = tenders
        self.refunds = refunds
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.closedAt = closedAt
        self.state = state
        self.version = version
        self.totalMoney = totalMoney
        self.totalTaxMoney = totalTaxMoney
        self.totalDiscountMoney = totalDiscountMoney
        self.totalServiceChargeMoney = totalServiceChargeMoney
    }

    public enum CodingKeys: String, CodingKey { 
        case id
        case locationId = "location_id"
        case referenceId = "reference_id"
        case source
        case customerId = "customer_id"
        case lineItems = "line_items"
        case taxes
        case discounts
        case serviceCharges = "service_charges"
        case fulfillments
        case returns
        case returnAmounts = "return_amounts"
        case netAmounts = "net_amounts"
        case roundingAdjustment = "rounding_adjustment"
        case tenders
        case refunds
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case closedAt = "closed_at"
        case state
        case version
        case totalMoney = "total_money"
        case totalTaxMoney = "total_tax_money"
        case totalDiscountMoney = "total_discount_money"
        case totalServiceChargeMoney = "total_service_charge_money"
    }

}

