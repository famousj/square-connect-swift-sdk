/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** A record of the hourly rate, start, and end times for a single work shift  for an employee. May include a record of the start and end times for breaks  taken during the shift. */

public struct Shift: Codable, Identifiable {

    /** UUID for this object */
    public let id: String?
    /** The ID of the employee this shift belongs to. */
    public let employeeId: String
    /** The ID of the location this shift occurred at. Should be based on where the employee clocked in. */
    public let locationId: String?
    /** Read-only convenience value that is calculated from the location based on &#x60;location_id&#x60;. Format: the IANA Timezone Database identifier for the location timezone. */
    public let timezone: String?
    /** RFC 3339; shifted to location timezone + offset. Precision up to the minute is respected; seconds are truncated. */
    public let startAt: String
    /** RFC 3339; shifted to timezone + offset. Precision up to the minute is respected; seconds are truncated. The &#x60;end_at&#x60; minute is not counted when the shift length is calculated. For example, a shift from &#x60;00:00&#x60; to &#x60;08:01&#x60; is considered an 8 hour shift (midnight to 8am). */
    public let endAt: String?
    /** Job and pay related information. */
    public let wage: ShiftWage?
    /** A list of any paid or unpaid breaks that were taken during this shift. */
    public let breaks: [Break]?
    /** Describes working state of the current &#x60;Shift&#x60;. See [ShiftStatus](#type-shiftstatus) for possible values */
    public let status: ShiftStatus?
    /** Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write. */
    public let version: Int?
    /** A read-only timestamp in RFC 3339 format; presented in UTC. */
    public let createdAt: String?
    /** A read-only timestamp in RFC 3339 format; presented in UTC. */
    public let updatedAt: String?

    public init(id: String?, employeeId: String, locationId: String?, timezone: String?, startAt: String, endAt: String?, wage: ShiftWage?, breaks: [Break]?, status: ShiftStatus?, version: Int?, createdAt: String?, updatedAt: String?) {
        self.id = id
        self.employeeId = employeeId
        self.locationId = locationId
        self.timezone = timezone
        self.startAt = startAt
        self.endAt = endAt
        self.wage = wage
        self.breaks = breaks
        self.status = status
        self.version = version
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey { 
        case id
        case employeeId = "employee_id"
        case locationId = "location_id"
        case timezone
        case startAt = "start_at"
        case endAt = "end_at"
        case wage
        case breaks
        case status
        case version
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

}

