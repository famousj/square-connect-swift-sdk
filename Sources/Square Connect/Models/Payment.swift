/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** Represents a payment processed by the Square API. */

public struct Payment: Codable, Identifiable {

    /** Unique ID for the payment. */
    public let id: String
    /** Timestamp of when the payment was created, in RFC 3339 format. */
    public let createdAt: String?
    /** Timestamp of when the payment was last updated, in RFC 3339 format. */
    public let updatedAt: String?
    /** The amount of money processed for this payment, not including &#x60;tip_money&#x60;. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. For more information, see [Working with monetary amounts](/build-basics/working-with-monetary-amounts). */
    public let amountMoney: Money
    /** The amount designated as a tip. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. */
    public let tipMoney: Money?
    /** The total money for the payment, including &#x60;amount_money&#x60; and &#x60;tip_money&#x60;. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. */
    public let totalMoney: Money?
    /** The amount of money the developer is taking as a fee for facilitating the payment on behalf of the seller. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.  For more information, see [Take Payments and Collect Fees](/payments-api/take-payments-and-collect-fees).  Cannot be more than 90% of the &#x60;total_money&#x60; value. */
    public let appFeeMoney: Money?
    /** Processing fees and fee adjustments assessed by Square on this payment. */
    public let processingFee: [ProcessingFee]?
    /** Total amount of the payment refunded to-date. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. */
    public let refundedMoney: Money?
    /** Indicates whether the payment is &#x60;APPROVED&#x60;, &#x60;COMPLETED&#x60;, &#x60;CANCELED&#x60;, or &#x60;FAILED&#x60;. */
    public let status: PaymentStatus?
    /** The source type for this payment */
    public let sourceType: String?
    /** Non-confidential details about the source. Only populated if the &#x60;source_type&#x60; is &#x60;CARD&#x60;. */
    public let cardDetails: CardPaymentDetails?
    /** ID of the location associated with the payment. */
    public let locationId: String?
    /** ID of the order associated with this payment. */
    public let orderId: String?
    /** An optional ID that associates this payment with an entity in another system. */
    public let referenceId: String?
    /** An optional customer_id to be entered by the developer when creating a payment. */
    public let customerId: String?
    /** List of &#x60;refund_id&#x60;s identifying refunds for this payment. */
    public let refundIds: [String]?
    /** The buyer&#39;s e-mail address */
    public let buyerEmailAddress: String?
    /** The buyer&#39;s billing address */
    public let billingAddress: Address?
    /** The buyer&#39;s shipping address */
    public let shippingAddress: Address?
    /** An optional note to include when creating a payment */
    public let note: String?

    public init(id: String, createdAt: String?, updatedAt: String?, amountMoney: Money, tipMoney: Money?, totalMoney: Money?, appFeeMoney: Money?, processingFee: [ProcessingFee]?, refundedMoney: Money?, status: PaymentStatus?, sourceType: String?, cardDetails: CardPaymentDetails?, locationId: String?, orderId: String?, referenceId: String?, customerId: String?, refundIds: [String]?, buyerEmailAddress: String?, billingAddress: Address?, shippingAddress: Address?, note: String?) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.amountMoney = amountMoney
        self.tipMoney = tipMoney
        self.totalMoney = totalMoney
        self.appFeeMoney = appFeeMoney
        self.processingFee = processingFee
        self.refundedMoney = refundedMoney
        self.status = status
        self.sourceType = sourceType
        self.cardDetails = cardDetails
        self.locationId = locationId
        self.orderId = orderId
        self.referenceId = referenceId
        self.customerId = customerId
        self.refundIds = refundIds
        self.buyerEmailAddress = buyerEmailAddress
        self.billingAddress = billingAddress
        self.shippingAddress = shippingAddress
        self.note = note
    }

    public enum CodingKeys: String, CodingKey { 
        case id
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case amountMoney = "amount_money"
        case tipMoney = "tip_money"
        case totalMoney = "total_money"
        case appFeeMoney = "app_fee_money"
        case processingFee = "processing_fee"
        case refundedMoney = "refunded_money"
        case status
        case sourceType = "source_type"
        case cardDetails = "card_details"
        case locationId = "location_id"
        case orderId = "order_id"
        case referenceId = "reference_id"
        case customerId = "customer_id"
        case refundIds = "refund_ids"
        case buyerEmailAddress = "buyer_email_address"
        case billingAddress = "billing_address"
        case shippingAddress = "shipping_address"
        case note
    }

}

