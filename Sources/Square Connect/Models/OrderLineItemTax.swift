/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** Represents a tax that applies to one or more line item in the order.  Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals. The amount distributed to each line item is relative to the amount the item contributes to the order subtotal. */

public struct OrderLineItemTax: Codable {

    /** Unique ID that identifies the tax only within this order. */
    public let uid: String?
    /** The catalog object id referencing [CatalogTax](#type-catalogtax). */
    public let catalogObjectId: String?
    /** The tax&#39;s name. */
    public let name: String?
    /** Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values */
    public let type: OrderLineItemTaxType?
    /** The percentage of the tax, as a string representation of a decimal number. For example, a value of &#x60;\&quot;7.25\&quot;&#x60; corresponds to a percentage of 7.25%. */
    public let percentage: String?
    /** The amount of the money applied by the tax in the order. */
    public let appliedMoney: Money?
    /** Indicates the level at which the tax applies. For &#x60;ORDER&#x60; scoped taxes, Square generates references in &#x60;applied_taxes&#x60; on all order line items that do not have them. For &#x60;LINE_ITEM&#x60; scoped taxes, the tax will only apply to line items with references in their &#x60;applied_taxes&#x60; field.  This field is immutable. To change the scope, you must delete the tax and re-add it as a new tax. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values */
    public let scope: OrderLineItemTaxScope?

    public init(uid: String?, catalogObjectId: String?, name: String?, type: OrderLineItemTaxType?, percentage: String?, appliedMoney: Money?, scope: OrderLineItemTaxScope?) {
        self.uid = uid
        self.catalogObjectId = catalogObjectId
        self.name = name
        self.type = type
        self.percentage = percentage
        self.appliedMoney = appliedMoney
        self.scope = scope
    }

    public enum CodingKeys: String, CodingKey { 
        case uid
        case catalogObjectId = "catalog_object_id"
        case name
        case type
        case percentage
        case appliedMoney = "applied_money"
        case scope
    }

}

