/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** Represents the service charge applied to the original order. */

public struct OrderReturnServiceCharge: Codable {

    /** Unique ID that identifies the return service charge only within this order. */
    public let uid: String?
    /** &#x60;uid&#x60; of the Service Charge from the Order containing the original charge of the service charge. &#x60;source_service_charge_uid&#x60; is &#x60;null&#x60; for unlinked returns. */
    public let sourceServiceChargeUid: String?
    /** The name of the service charge. */
    public let name: String?
    /** The catalog object ID of the associated [CatalogServiceCharge](#type-catalogservicecharge). */
    public let catalogObjectId: String?
    /** The percentage of the service charge, as a string representation of a decimal number. For example, a value of &#x60;\&quot;7.25\&quot;&#x60; corresponds to a percentage of 7.25%.  Exactly one of &#x60;percentage&#x60; or &#x60;amount_money&#x60; should be set. */
    public let percentage: String?
    /** The amount of a non-percentage based service charge.  Exactly one of &#x60;percentage&#x60; or &#x60;amount_money&#x60; should be set. */
    public let amountMoney: Money?
    /** The amount of money applied to the order by the service charge, including any inclusive tax amounts, as calculated by Square.  - For fixed-amount service charges, &#x60;applied_money&#x60; is equal to &#x60;amount_money&#x60;. - For percentage-based service charges, &#x60;applied_money&#x60; is the money calculated using the percentage. */
    public let appliedMoney: Money?
    /** The total amount of money to collect for the service charge.  __NOTE__: if an inclusive tax is applied to the service charge, &#x60;total_money&#x60; does not equal &#x60;applied_money&#x60; plus &#x60;total_tax_money&#x60; since the inclusive tax amount will already be included in both &#x60;applied_money&#x60; and &#x60;total_tax_money&#x60;. */
    public let totalMoney: Money?
    /** The total amount of tax money to collect for the service charge. */
    public let totalTaxMoney: Money?
    /** The calculation phase after which to apply the service charge. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values */
    public let calculationPhase: OrderServiceChargeCalculationPhase?
    /** Indicates whether the surcharge can be taxed. Service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable. */
    public let taxable: Bool?
    /** Taxes applied to the &#x60;OrderReturnServiceCharge&#x60;. By default, return-level taxes apply to &#x60;OrderReturnServiceCharge&#x60;s calculated in the &#x60;SUBTOTAL_PHASE&#x60; if &#x60;taxable&#x60; is set to &#x60;true&#x60;.  On read or retrieve, this list includes both item-level taxes and any return-level taxes apportioned to this item.  This field has been deprecated in favour of &#x60;applied_taxes&#x60;. */
    public let returnTaxes: [OrderReturnTax]?
    /** The list of references to &#x60;OrderReturnTax&#x60; entities applied to the &#x60;OrderReturnServiceCharge&#x60;. Each &#x60;OrderLineItemAppliedTax&#x60; has a &#x60;tax_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderReturnTax&#x60; that is being applied to the &#x60;OrderReturnServiceCharge&#x60;. On reads, the amount applied is populated. */
    public let appliedTaxes: [OrderLineItemAppliedTax]?

    public init(uid: String?, sourceServiceChargeUid: String?, name: String?, catalogObjectId: String?, percentage: String?, amountMoney: Money?, appliedMoney: Money?, totalMoney: Money?, totalTaxMoney: Money?, calculationPhase: OrderServiceChargeCalculationPhase?, taxable: Bool?, returnTaxes: [OrderReturnTax]?, appliedTaxes: [OrderLineItemAppliedTax]?) {
        self.uid = uid
        self.sourceServiceChargeUid = sourceServiceChargeUid
        self.name = name
        self.catalogObjectId = catalogObjectId
        self.percentage = percentage
        self.amountMoney = amountMoney
        self.appliedMoney = appliedMoney
        self.totalMoney = totalMoney
        self.totalTaxMoney = totalTaxMoney
        self.calculationPhase = calculationPhase
        self.taxable = taxable
        self.returnTaxes = returnTaxes
        self.appliedTaxes = appliedTaxes
    }

    public enum CodingKeys: String, CodingKey { 
        case uid
        case sourceServiceChargeUid = "source_service_charge_uid"
        case name
        case catalogObjectId = "catalog_object_id"
        case percentage
        case amountMoney = "amount_money"
        case appliedMoney = "applied_money"
        case totalMoney = "total_money"
        case totalTaxMoney = "total_tax_money"
        case calculationPhase = "calculation_phase"
        case taxable
        case returnTaxes = "return_taxes"
        case appliedTaxes = "applied_taxes"
    }

}

