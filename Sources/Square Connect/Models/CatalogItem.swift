/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** An item (i.e., product family) in the Catalog object model. */

public struct CatalogItem: Codable {

    /** The item&#39;s name. Searchable. This field must not be empty. This field has max length of 512 Unicode code points. */
    public let name: String?
    /** The item&#39;s description. Searchable. This field has max length of 4096 Unicode code points. */
    public let _description: String?
    /** The text of the item&#39;s display label in the Square Point of Sale app. Only up to the first five characters of the string are used. Searchable. This field has max length of 24 Unicode code points. */
    public let abbreviation: String?
    /** The color of the item&#39;s display label in the Square Point of Sale app. This must be a valid hex color code. */
    public let labelColor: String?
    /** If &#x60;true&#x60;, the item can be added to shipping orders from the merchant&#39;s online store. */
    public let availableOnline: Bool?
    /** If &#x60;true&#x60;, the item can be added to pickup orders from the merchant&#39;s online store. */
    public let availableForPickup: Bool?
    /** If &#x60;true&#x60;, the item can be added to electronically fulfilled orders from the merchant&#39;s online store. */
    public let availableElectronically: Bool?
    /** The ID of the item&#39;s category, if any. */
    public let categoryId: String?
    /** A set of IDs indicating the [CatalogTax](#type-catalogtax)es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. [CatalogTax](#type-catalogtax)es may also be added to or deleted from an item using &#x60;UpdateItemTaxes&#x60;. */
    public let taxIds: [String]?
    /** A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. [CatalogModifierList](#type-catalogmodifierlist)s may also be added to or deleted from an item using &#x60;UpdateItemModifierLists&#x60;. */
    public let modifierListInfo: [CatalogItemModifierListInfo]?
    /** A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this item.  Maximum: 250 item variations */
    public let variations: [CatalogObject]?
    /** The product type of the item. May not be changed once an item has been created.  Only items of product type &#x60;REGULAR&#x60; or &#x60;APPOINTMENTS_SERVICE&#x60; may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values */
    public let productType: CatalogItemProductType?
    /** If &#x60;false&#x60;, the Square Point of Sale app will present the [CatalogItem](#type-catalogitem)&#39;s details screen immediately, allowing the merchant to choose [CatalogModifier](#type-catalogmodifier)s before adding the item to the cart.  This is the default behavior.  If &#x60;true&#x60;, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item&#39;s details.  Third-party clients are encouraged to implement similar behaviors. */
    public let skipModifierScreen: Bool?
    /** List of item options IDs for this item. Used to manage and group item variations in a specified order.  Maximum: 6 item options. */
    public let itemOptions: [CatalogItemOptionForItem]?

    public init(name: String?, _description: String?, abbreviation: String?, labelColor: String?, availableOnline: Bool?, availableForPickup: Bool?, availableElectronically: Bool?, categoryId: String?, taxIds: [String]?, modifierListInfo: [CatalogItemModifierListInfo]?, variations: [CatalogObject]?, productType: CatalogItemProductType?, skipModifierScreen: Bool?, itemOptions: [CatalogItemOptionForItem]?) {
        self.name = name
        self._description = _description
        self.abbreviation = abbreviation
        self.labelColor = labelColor
        self.availableOnline = availableOnline
        self.availableForPickup = availableForPickup
        self.availableElectronically = availableElectronically
        self.categoryId = categoryId
        self.taxIds = taxIds
        self.modifierListInfo = modifierListInfo
        self.variations = variations
        self.productType = productType
        self.skipModifierScreen = skipModifierScreen
        self.itemOptions = itemOptions
    }

    public enum CodingKeys: String, CodingKey { 
        case name
        case _description = "description"
        case abbreviation
        case labelColor = "label_color"
        case availableOnline = "available_online"
        case availableForPickup = "available_for_pickup"
        case availableElectronically = "available_electronically"
        case categoryId = "category_id"
        case taxIds = "tax_ids"
        case modifierListInfo = "modifier_list_info"
        case variations
        case productType = "product_type"
        case skipModifierScreen = "skip_modifier_screen"
        case itemOptions = "item_options"
    }

}

