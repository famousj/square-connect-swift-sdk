/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** The wrapper object for object types in the Catalog data model. The type of a particular &#x60;CatalogObject&#x60; is determined by the value of &#x60;type&#x60; and only the corresponding data field may be set.  - if type &#x3D; &#x60;ITEM&#x60;, only &#x60;item_data&#x60; will be populated and it will contain a valid [CatalogItem](#type-catalogitem) object. - if type &#x3D; &#x60;ITEM_VARIATION&#x60;, only &#x60;item_variation_data&#x60; will be populated and it will contain a valid [CatalogItemVariation](#type-catalogitemvariation) object. - if type &#x3D; &#x60;MODIFIER&#x60;, only &#x60;modifier_data&#x60; will be populated and it will contain a valid [CatalogModifier](#type-catalogmodifier) object. - if type &#x3D; &#x60;MODIFIER_LIST&#x60;, only &#x60;modifier_list_data&#x60; will be populated and it will contain a valid [CatalogModifierList](#type-catalogmodifierlist) object. - if type &#x3D; &#x60;CATEGORY&#x60;, only &#x60;category_data&#x60; will be populated and it will contain a valid [CatalogCategory](#type-catalogcategory) object. - if type &#x3D; &#x60;DISCOUNT&#x60;, only &#x60;discount_data&#x60; will be populated and it will contain a valid [CatalogDiscount](#type-catalogdiscount) object. - if type &#x3D; &#x60;TAX&#x60;, only &#x60;tax_data&#x60; will be populated and it will contain a valid [CatalogTax](#type-catalogtax) object. - if type &#x3D; &#x60;IMAGE&#x60;, only &#x60;image_data&#x60; will be populated and it will contain a valid [CatalogImage](#type-catalogimage) object.  For a more detailed discussion of the Catalog data model, please see the [Design a Catalog](/catalog-api/design-a-catalog) guide. */

public struct CatalogObject: Codable, Identifiable {

    /** The type of this object. Each object type has expected properties expressed in a structured format within its corresponding &#x60;*_data&#x60; field below. See [CatalogObjectType](#type-catalogobjecttype) for possible values */
    public let type: CatalogObjectType
    /** An identifier to reference this object in the catalog. When a new CatalogObject is inserted, the client should set the id to a temporary identifier starting with a &#x60;&#39;#&#39;&#x60; character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references. */
    public let id: String
    /** Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., &#x60;\&quot;2016-08-15T23:59:33.123Z\&quot;&#x60; would indicate the UTC time (denoted by &#x60;Z&#x60;) of August 15, 2016 at 23:59:33 and 123 milliseconds. */
    public let updatedAt: String?
    /** The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting. */
    public let version: Int64?
    /** If &#x60;true&#x60;, the object has been deleted from the database. Must be &#x60;false&#x60; for new objects being inserted. When deleted, the &#x60;updated_at&#x60; field will equal the deletion time. */
    public let isDeleted: Bool?
    /** The Connect V1 IDs for this object at each [location](#type-location) where it is present, where they differ from the object&#39;s Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs. */
    public let catalogV1Ids: [CatalogV1Id]?
    /** If &#x60;true&#x60;, this object is present at all locations (including future locations), except where specified in the &#x60;absent_at_location_ids&#x60; field. If &#x60;false&#x60;, this object is not present at any locations (including future locations), except where specified in the &#x60;present_at_location_ids&#x60; field. If not specified, defaults to &#x60;true&#x60;. */
    public let presentAtAllLocations: Bool?
    /** A list of locations where the object is present, even if &#x60;present_at_all_locations&#x60; is &#x60;false&#x60;. */
    public let presentAtLocationIds: [String]?
    /** A list of locations where the object is not present, even if &#x60;present_at_all_locations&#x60; is &#x60;true&#x60;. */
    public let absentAtLocationIds: [String]?
    /** Identifies the &#x60;CatalogImage&#x60; attached to this &#x60;CatalogObject&#x60;. */
    public let imageId: String?
    /** Structured data for a [CatalogItem](#type-catalogitem), set for CatalogObjects of type &#x60;ITEM&#x60;. */
    public let itemData: CatalogItem?
    /** Structured data for a [CatalogCategory](#type-catalogcategory), set for CatalogObjects of type &#x60;CATEGORY&#x60;. */
    public let categoryData: CatalogCategory?
    /** Structured data for a [CatalogItemVariation](#type-catalogitemvariation), set for CatalogObjects of type &#x60;ITEM_VARIATION&#x60;. */
    public let itemVariationData: CatalogItemVariation?
    /** Structured data for a [CatalogTax](#type-catalogtax), set for CatalogObjects of type &#x60;TAX&#x60;. */
    public let taxData: CatalogTax?
    /** Structured data for a [CatalogDiscount](#type-catalogdiscount), set for CatalogObjects of type &#x60;DISCOUNT&#x60;. */
    public let discountData: CatalogDiscount?
    /** Structured data for a [CatalogModifierList](#type-catalogmodifierlist), set for CatalogObjects of type &#x60;MODIFIER_LIST&#x60;. */
    public let modifierListData: CatalogModifierList?
    /** Structured data for a [CatalogModifier](#type-catalogmodifier), set for CatalogObjects of type &#x60;MODIFIER&#x60;. */
    public let modifierData: CatalogModifier?
    /** Structured data for a [CatalogTimePeriod](#type-catalogtimeperiod), set for CatalogObjects of type &#x60;TIME_PERIOD&#x60;. */
    public let timePeriodData: CatalogTimePeriod?
    /** Structured data for a [CatalogProductSet](#type-catalogproductset), set for CatalogObjects of type &#x60;PRODUCT_SET&#x60;. */
    public let productSetData: CatalogProductSet?
    /** Structured data for a [CatalogPricingRule](#type-catalogpricingrule), set for CatalogObjects of type &#x60;PRICING_RULE&#x60;. */
    public let pricingRuleData: CatalogPricingRule?
    /** Structured data for a [CatalogImage](#type-catalogimage), set for CatalogObjects of type &#x60;IMAGE&#x60;. */
    public let imageData: CatalogImage?
    /** Structured data for a [CatalogMeasurementUnit](#type-catalogmeasurementunit), set for CatalogObjects of type &#x60;MEASUREMENT_UNIT&#x60;. */
    public let measurementUnitData: CatalogMeasurementUnit?
    /** Structured data for a [CatalogItemOption](#type-catalogitemoption), set for CatalogObjects of type &#x60;ITEM_OPTION&#x60;. */
    public let itemOptionData: CatalogItemOption?
    /** Structured data for a [CatalogItemOptionValue](#type-catalogitemoptionvalue), set for CatalogObjects of type &#x60;ITEM_OPTION_VAL&#x60;. */
    public let itemOptionValueData: CatalogItemOptionValue?

    public init(type: CatalogObjectType, id: String, updatedAt: String?, version: Int64?, isDeleted: Bool?, catalogV1Ids: [CatalogV1Id]?, presentAtAllLocations: Bool?, presentAtLocationIds: [String]?, absentAtLocationIds: [String]?, imageId: String?, itemData: CatalogItem?, categoryData: CatalogCategory?, itemVariationData: CatalogItemVariation?, taxData: CatalogTax?, discountData: CatalogDiscount?, modifierListData: CatalogModifierList?, modifierData: CatalogModifier?, timePeriodData: CatalogTimePeriod?, productSetData: CatalogProductSet?, pricingRuleData: CatalogPricingRule?, imageData: CatalogImage?, measurementUnitData: CatalogMeasurementUnit?, itemOptionData: CatalogItemOption?, itemOptionValueData: CatalogItemOptionValue?) {
        self.type = type
        self.id = id
        self.updatedAt = updatedAt
        self.version = version
        self.isDeleted = isDeleted
        self.catalogV1Ids = catalogV1Ids
        self.presentAtAllLocations = presentAtAllLocations
        self.presentAtLocationIds = presentAtLocationIds
        self.absentAtLocationIds = absentAtLocationIds
        self.imageId = imageId
        self.itemData = itemData
        self.categoryData = categoryData
        self.itemVariationData = itemVariationData
        self.taxData = taxData
        self.discountData = discountData
        self.modifierListData = modifierListData
        self.modifierData = modifierData
        self.timePeriodData = timePeriodData
        self.productSetData = productSetData
        self.pricingRuleData = pricingRuleData
        self.imageData = imageData
        self.measurementUnitData = measurementUnitData
        self.itemOptionData = itemOptionData
        self.itemOptionValueData = itemOptionValueData
    }

    public enum CodingKeys: String, CodingKey { 
        case type
        case id
        case updatedAt = "updated_at"
        case version
        case isDeleted = "is_deleted"
        case catalogV1Ids = "catalog_v1_ids"
        case presentAtAllLocations = "present_at_all_locations"
        case presentAtLocationIds = "present_at_location_ids"
        case absentAtLocationIds = "absent_at_location_ids"
        case imageId = "image_id"
        case itemData = "item_data"
        case categoryData = "category_data"
        case itemVariationData = "item_variation_data"
        case taxData = "tax_data"
        case discountData = "discount_data"
        case modifierListData = "modifier_list_data"
        case modifierData = "modifier_data"
        case timePeriodData = "time_period_data"
        case productSetData = "product_set_data"
        case pricingRuleData = "pricing_rule_data"
        case imageData = "image_data"
        case measurementUnitData = "measurement_unit_data"
        case itemOptionData = "item_option_data"
        case itemOptionValueData = "item_option_value_data"
    }

}

