/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** Creates a payment from the source (nonce, card on file, etc.)  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.  For more information, see [Payments and Refunds Overview](/payments-api/overview).  For information about application fees in a payment, see [Collect Fees](/payments-api/take-payments-and-collect-fees). */

public struct CreatePaymentRequest: Codable {

    /** The ID for the source of funds for this payment.  This can be a nonce generated by the Payment Form or a card on file made with the Customers API. */
    public let sourceId: String
    /** A unique string that identifies this CreatePayment request. Keys can be any valid string but must be unique for every CreatePayment request.  Max: 45 characters  See [Idempotency keys](/basics/api101/idempotency) for more information. */
    public let idempotencyKey: String
    /** The amount of money to accept for this payment, not including &#x60;tip_money&#x60;.  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is accepting the payment. */
    public let amountMoney: Money
    /** The amount designated as a tip, in addition to &#x60;amount_money&#x60;  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is accepting the payment. */
    public let tipMoney: Money?
    /** The amount of money the developer is taking as a fee for facilitating the payment on behalf of the seller.  Cannot be more than 90% of the total amount of the Payment.  Must be specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](/build-basics/working-with-monetary-amounts) for details.  The currency code must match the currency associated with the business that is accepting the payment.  For more information about the application fee scenario, see [Collect Fees](/payments-api/take-payments-and-collect-fees). */
    public let appFeeMoney: Money?
    /** If set to &#x60;true&#x60;, this payment will be completed when possible. If set to &#x60;false&#x60;, this payment will be held in an approved state until either explicitly completed or canceled. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).  Default: true */
    public let autocomplete: Bool?
    /** Associate a previously created order with this payment */
    public let orderId: String?
    /** The ID of the customer associated with the payment. Required if the &#x60;source_id&#x60; refers to a card on file created using the Customers API. */
    public let customerId: String?
    /** The location ID to associate with the payment. If not specified, the default location is used. */
    public let locationId: String?
    /** A user-defined ID to associate with the payment. You can use this field to associate the payment to an entity in an external system. For example, you might specify an order ID that is generated by a third-party shopping cart.  Limit 40 characters. */
    public let referenceId: String?
    /** An identifying token generated by &#x60;SqPaymentForm.verifyBuyer()&#x60;. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  See the [SCA Overview](/sca-overview) for more. */
    public let verificationToken: String?
    /** If set to true and charging a Square Gift Card, a payment may be returned with amount_money equal to less than what was requested.  Example, a request for $20 when charging a Square Gift Card with balance of $5 wil result in an APPROVED payment of $5.  You may choose to prompt the buyer for an additional payment to cover the remainder, or cancel the gift card payment.  Cannot be &#x60;true&#x60; when &#x60;autocomplete &#x3D; true  For more information, see [Partial amount with Square gift cards](/payments-api/take-payments#partial-payment-gift-card).  Default: false */
    public let acceptPartialAuthorization: Bool?
    /** The buyer&#39;s e-mail address */
    public let buyerEmailAddress: String?
    /** The buyer&#39;s billing address. */
    public let billingAddress: Address?
    /** The buyer&#39;s shipping address. */
    public let shippingAddress: Address?
    /** An optional note to be entered by the developer when creating a payment  Limit 500 characters. */
    public let note: String?

    public init(sourceId: String, idempotencyKey: String, amountMoney: Money, tipMoney: Money?, appFeeMoney: Money?, autocomplete: Bool?, orderId: String?, customerId: String?, locationId: String?, referenceId: String?, verificationToken: String?, acceptPartialAuthorization: Bool?, buyerEmailAddress: String?, billingAddress: Address?, shippingAddress: Address?, note: String?) {
        self.sourceId = sourceId
        self.idempotencyKey = idempotencyKey
        self.amountMoney = amountMoney
        self.tipMoney = tipMoney
        self.appFeeMoney = appFeeMoney
        self.autocomplete = autocomplete
        self.orderId = orderId
        self.customerId = customerId
        self.locationId = locationId
        self.referenceId = referenceId
        self.verificationToken = verificationToken
        self.acceptPartialAuthorization = acceptPartialAuthorization
        self.buyerEmailAddress = buyerEmailAddress
        self.billingAddress = billingAddress
        self.shippingAddress = shippingAddress
        self.note = note
    }

    public enum CodingKeys: String, CodingKey { 
        case sourceId = "source_id"
        case idempotencyKey = "idempotency_key"
        case amountMoney = "amount_money"
        case tipMoney = "tip_money"
        case appFeeMoney = "app_fee_money"
        case autocomplete
        case orderId = "order_id"
        case customerId = "customer_id"
        case locationId = "location_id"
        case referenceId = "reference_id"
        case verificationToken = "verification_token"
        case acceptPartialAuthorization = "accept_partial_authorization"
        case buyerEmailAddress = "buyer_email_address"
        case billingAddress = "billing_address"
        case shippingAddress = "shipping_address"
        case note
    }

}

