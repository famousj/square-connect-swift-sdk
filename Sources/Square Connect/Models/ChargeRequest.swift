/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** Defines the parameters that can be included in the body of a request to the [Charge](#endpoint-charge) endpoint.  Deprecated - recommend using [CreatePayment](#endpoint-payments-createpayment) */

public struct ChargeRequest: Codable {

    /** A value you specify that uniquely identifies this transaction among transactions you&#39;ve created.  If you&#39;re unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency](/basics/api101/idempotency) for more information. */
    public let idempotencyKey: String
    /** The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of &#x60;currency&#x60; must match the currency associated with the business that is charging the card. */
    public let amountMoney: Money
    /** A nonce generated from the &#x60;SqPaymentForm&#x60; that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the &#x60;SqPaymentForm&#x60;. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for &#x60;customer_card_id&#x60;. */
    public let cardNonce: String?
    /** The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for &#x60;card_nonce&#x60;.  If you provide this value, you _must_ also provide a value for &#x60;customer_id&#x60;. */
    public let customerCardId: String?
    /** If &#x60;true&#x60;, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).  Default value: &#x60;false&#x60; */
    public let delayCapture: Bool?
    /** An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters. */
    public let referenceId: String?
    /** An optional note to associate with the transaction.  This value cannot exceed 60 characters. */
    public let note: String?
    /** The ID of the customer to associate this transaction with. This field is required if you provide a value for &#x60;customer_card_id&#x60;, and optional otherwise. */
    public let customerId: String?
    /** The buyer&#39;s billing address. */
    public let billingAddress: Address?
    /** The buyer&#39;s shipping address, if available. */
    public let shippingAddress: Address?
    /** The buyer&#39;s email address, if available. */
    public let buyerEmailAddress: String?
    /** The ID of the order to associate with this transaction.  If you provide this value, the &#x60;amount_money&#x60; value of your request must __exactly match__ the value of the order&#39;s &#x60;total_money&#x60; field. */
    public let orderId: String?
    /** The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the &#x60;amount_money&#x60; value in your additional_recipients must not be more than 90% of the &#x60;amount_money&#x60; value in the charge request. The &#x60;location_id&#x60; must be the valid location of the app owner merchant.  This field requires the &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission.  This field is currently not supported in sandbox. */
    public let additionalRecipients: [AdditionalRecipient]?
    /** An identifying token generated by &#x60;SqPaymentForm.verifyBuyer()&#x60;. Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity. */
    public let verificationToken: String?

    public init(idempotencyKey: String, amountMoney: Money, cardNonce: String?, customerCardId: String?, delayCapture: Bool?, referenceId: String?, note: String?, customerId: String?, billingAddress: Address?, shippingAddress: Address?, buyerEmailAddress: String?, orderId: String?, additionalRecipients: [AdditionalRecipient]?, verificationToken: String?) {
        self.idempotencyKey = idempotencyKey
        self.amountMoney = amountMoney
        self.cardNonce = cardNonce
        self.customerCardId = customerCardId
        self.delayCapture = delayCapture
        self.referenceId = referenceId
        self.note = note
        self.customerId = customerId
        self.billingAddress = billingAddress
        self.shippingAddress = shippingAddress
        self.buyerEmailAddress = buyerEmailAddress
        self.orderId = orderId
        self.additionalRecipients = additionalRecipients
        self.verificationToken = verificationToken
    }

    public enum CodingKeys: String, CodingKey { 
        case idempotencyKey = "idempotency_key"
        case amountMoney = "amount_money"
        case cardNonce = "card_nonce"
        case customerCardId = "customer_card_id"
        case delayCapture = "delay_capture"
        case referenceId = "reference_id"
        case note
        case customerId = "customer_id"
        case billingAddress = "billing_address"
        case shippingAddress = "shipping_address"
        case buyerEmailAddress = "buyer_email_address"
        case orderId = "order_id"
        case additionalRecipients = "additional_recipients"
        case verificationToken = "verification_token"
    }

}

