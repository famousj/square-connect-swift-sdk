/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** V1Order */

public struct V1Order: Codable, Identifiable {

    /** Any errors that occurred during the request. */
    public let errors: [ModelError]?
    /** The order&#39;s unique identifier. */
    public let id: String?
    /** The email address of the order&#39;s buyer. */
    public let buyerEmail: String?
    /** The name of the order&#39;s buyer. */
    public let recipientName: String?
    /** The phone number to use for the order&#39;s delivery. */
    public let recipientPhoneNumber: String?
    /** Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. See [V1OrderState](#type-v1orderstate) for possible values */
    public let state: V1OrderState?
    /** The address to ship the order to. */
    public let shippingAddress: Address?
    /** The amount of all items purchased in the order, before taxes and shipping. */
    public let subtotalMoney: V1Money?
    /** The shipping cost for the order. */
    public let totalShippingMoney: V1Money?
    /** The total of all taxes applied to the order. */
    public let totalTaxMoney: V1Money?
    /** The total cost of the order. */
    public let totalPriceMoney: V1Money?
    /** The total of all discounts applied to the order. */
    public let totalDiscountMoney: V1Money?
    /** The time when the order was created, in ISO 8601 format. */
    public let createdAt: String?
    /** The time when the order was last modified, in ISO 8601 format. */
    public let updatedAt: String?
    /** The time when the order expires if no action is taken, in ISO 8601 format. */
    public let expiresAt: String?
    /** The unique identifier of the payment associated with the order. */
    public let paymentId: String?
    /** A note provided by the buyer when the order was created, if any. */
    public let buyerNote: String?
    /** A note provided by the merchant when the order&#39;s state was set to COMPLETED, if any */
    public let completedNote: String?
    /** A note provided by the merchant when the order&#39;s state was set to REFUNDED, if any. */
    public let refundedNote: String?
    /** A note provided by the merchant when the order&#39;s state was set to CANCELED, if any. */
    public let canceledNote: String?
    /** The tender used to pay for the order. */
    public let tender: V1Tender?
    /** The history of actions associated with the order. */
    public let orderHistory: [V1OrderHistoryEntry]?
    /** The promo code provided by the buyer, if any. */
    public let promoCode: String?
    /** For Bitcoin transactions, the address that the buyer sent Bitcoin to. */
    public let btcReceiveAddress: String?
    /** For Bitcoin transactions, the price of the buyer&#39;s order in satoshi (100 million satoshi equals 1 BTC). */
    public let btcPriceSatoshi: Double?

    public init(errors: [ModelError]?, id: String?, buyerEmail: String?, recipientName: String?, recipientPhoneNumber: String?, state: V1OrderState?, shippingAddress: Address?, subtotalMoney: V1Money?, totalShippingMoney: V1Money?, totalTaxMoney: V1Money?, totalPriceMoney: V1Money?, totalDiscountMoney: V1Money?, createdAt: String?, updatedAt: String?, expiresAt: String?, paymentId: String?, buyerNote: String?, completedNote: String?, refundedNote: String?, canceledNote: String?, tender: V1Tender?, orderHistory: [V1OrderHistoryEntry]?, promoCode: String?, btcReceiveAddress: String?, btcPriceSatoshi: Double?) {
        self.errors = errors
        self.id = id
        self.buyerEmail = buyerEmail
        self.recipientName = recipientName
        self.recipientPhoneNumber = recipientPhoneNumber
        self.state = state
        self.shippingAddress = shippingAddress
        self.subtotalMoney = subtotalMoney
        self.totalShippingMoney = totalShippingMoney
        self.totalTaxMoney = totalTaxMoney
        self.totalPriceMoney = totalPriceMoney
        self.totalDiscountMoney = totalDiscountMoney
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.expiresAt = expiresAt
        self.paymentId = paymentId
        self.buyerNote = buyerNote
        self.completedNote = completedNote
        self.refundedNote = refundedNote
        self.canceledNote = canceledNote
        self.tender = tender
        self.orderHistory = orderHistory
        self.promoCode = promoCode
        self.btcReceiveAddress = btcReceiveAddress
        self.btcPriceSatoshi = btcPriceSatoshi
    }

    public enum CodingKeys: String, CodingKey { 
        case errors
        case id
        case buyerEmail = "buyer_email"
        case recipientName = "recipient_name"
        case recipientPhoneNumber = "recipient_phone_number"
        case state
        case shippingAddress = "shipping_address"
        case subtotalMoney = "subtotal_money"
        case totalShippingMoney = "total_shipping_money"
        case totalTaxMoney = "total_tax_money"
        case totalPriceMoney = "total_price_money"
        case totalDiscountMoney = "total_discount_money"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case expiresAt = "expires_at"
        case paymentId = "payment_id"
        case buyerNote = "buyer_note"
        case completedNote = "completed_note"
        case refundedNote = "refunded_note"
        case canceledNote = "canceled_note"
        case tender
        case orderHistory = "order_history"
        case promoCode = "promo_code"
        case btcReceiveAddress = "btc_receive_address"
        case btcPriceSatoshi = "btc_price_satoshi"
    }

}

