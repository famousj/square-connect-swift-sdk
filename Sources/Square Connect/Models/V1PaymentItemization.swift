/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 */


import Foundation


/** Payment include an&#x60; itemizations&#x60; field that lists the items purchased, along with associated fees, modifiers, and discounts. Each itemization has an &#x60;itemization_type&#x60; field that indicates which of the following the itemization represents:  &lt;ul&gt; &lt;li&gt;An item variation from the merchant&#39;s item library&lt;/li&gt; &lt;li&gt;A custom monetary amount&lt;/li&gt; &lt;li&gt; An action performed on a Square gift card, such as activating or reloading it. &lt;/li&gt; &lt;/ul&gt;  *Note**: itemization information included in a &#x60;Payment&#x60; object reflects details collected **at the time of the payment**. Details such as the name or price of items might have changed since the payment was processed. */

public struct V1PaymentItemization: Codable {

    /** The item&#39;s name. */
    public let name: String?
    /** The quantity of the item purchased. This can be a decimal value. */
    public let quantity: Double?
    /** The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT See [V1PaymentItemizationItemizationType](#type-v1paymentitemizationitemizationtype) for possible values */
    public let itemizationType: V1PaymentItemizationItemizationType?
    /** Details of the item, including its unique identifier and the identifier of the item variation purchased. */
    public let itemDetail: V1PaymentItemDetail?
    /** Notes entered by the merchant about the item at the time of payment, if any. */
    public let notes: String?
    /** The name of the item variation purchased, if any. */
    public let itemVariationName: String?
    /** The total cost of the item, including all taxes and discounts. */
    public let totalMoney: V1Money?
    /** The cost of a single unit of this item. */
    public let singleQuantityMoney: V1Money?
    /** The total cost of the itemization and its modifiers, not including taxes or discounts. */
    public let grossSalesMoney: V1Money?
    /** The total of all discounts applied to the itemization. This value is always negative or zero. */
    public let discountMoney: V1Money?
    /** The sum of gross_sales_money and discount_money. */
    public let netSalesMoney: V1Money?
    /** All taxes applied to this itemization. */
    public let taxes: [V1PaymentTax]?
    /** All discounts applied to this itemization. */
    public let discounts: [V1PaymentDiscount]?
    /** All modifier options applied to this itemization. */
    public let modifiers: [V1PaymentModifier]?

    public init(name: String?, quantity: Double?, itemizationType: V1PaymentItemizationItemizationType?, itemDetail: V1PaymentItemDetail?, notes: String?, itemVariationName: String?, totalMoney: V1Money?, singleQuantityMoney: V1Money?, grossSalesMoney: V1Money?, discountMoney: V1Money?, netSalesMoney: V1Money?, taxes: [V1PaymentTax]?, discounts: [V1PaymentDiscount]?, modifiers: [V1PaymentModifier]?) {
        self.name = name
        self.quantity = quantity
        self.itemizationType = itemizationType
        self.itemDetail = itemDetail
        self.notes = notes
        self.itemVariationName = itemVariationName
        self.totalMoney = totalMoney
        self.singleQuantityMoney = singleQuantityMoney
        self.grossSalesMoney = grossSalesMoney
        self.discountMoney = discountMoney
        self.netSalesMoney = netSalesMoney
        self.taxes = taxes
        self.discounts = discounts
        self.modifiers = modifiers
    }

    public enum CodingKeys: String, CodingKey { 
        case name
        case quantity
        case itemizationType = "itemization_type"
        case itemDetail = "item_detail"
        case notes
        case itemVariationName = "item_variation_name"
        case totalMoney = "total_money"
        case singleQuantityMoney = "single_quantity_money"
        case grossSalesMoney = "gross_sales_money"
        case discountMoney = "discount_money"
        case netSalesMoney = "net_sales_money"
        case taxes
        case discounts
        case modifiers
    }

}

